- name: Install Camera Monitors
  become: true
  become_user: root
  hosts: primemover
  # hosts: camera_monitors
  vars:
    arch_map: 
      "armv6l": "armv6"
      "armv7l": "armv7"
      "aarch64": "arm64v8"
      "x86_64": "amd64"
      "amd64": "amd64"
    archive_arch: "{{ arch_map[ ansible_architecture ] }}"
    archive_version: "0.23.6"
    archive_filename: camera_monitor
    service_name: "camera_monitor"
    username: "{{ camera_user }}"
    group: "{{ username }}"
    target_directory: "camera_monitor"
    description: "Camera Monitor"
  tasks:
    # - name: Update os packages
    #   ansible.builtin.apt:
    #     update_cache: yes
    #     upgrade: yes

    - name: Build deployment archive - Local
      local_action: 
        module: ansible.builtin.archive
        dest: "build/{{ archive_filename }}.tar.gz"
        path: 
        - ../camera_monitor/*.py
        - ../camera_monitor/requirements.txt
      run_once: true
    - name: Create user
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /bin/false
        system: true
    - name: Add authorized_keys for admin
      ansible.posix.authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', '../credentials/local_network_rsa.pub') }}"
    - name: Retrieve user information
      ansible.builtin.getent:
        database: passwd
        key: "{{ username }}"
    - name: Set home_directory
      ansible.builtin.set_fact:
        home_directory: "{{ ansible_facts.getent_passwd.camera_stream[4] }}"
    - name: Set working_directory
      ansible.builtin.set_fact:
        working_directory: "{{ home_directory }}/{{ target_directory }}"
    - name: Set config
      ansible.builtin.set_fact:
        config: "{{ home_directory }}/camera_config.json"
    - name: Set exec_start
      ansible.builtin.set_fact:
        exec_start: "/usr/bin/python3 {{ working_directory }}/camera_monitor.py {{ config }}"
    - name: Ensure .ssh directory
      ansible.builtin.file:
        path: "{{ home_directory }}/.ssh"
        state: directory
        owner: "{{ username }}"
        group: "{{ group }}"
        mode: 0700
    - name: Generate SSH key for fileservers
      community.crypto.openssh_keypair:
        path: "{{ home_directory }}/.ssh/fileserver_rsa"
        comment: "Camera filerserver key - {{ inventory_hostname }}"
        owner: "{{ username }}"
        group: "{{ group }}"
        type: ed25519
        state: present
        regenerate: never
    - name: Fetch remote public key
      ansible.builtin.fetch:
        src: "/home/{{ username }}/.ssh/fileserver_rsa.pub"
        dest: "../credentials/{{ inventory_hostname }}_fileserver_rsa.pub"
        fail_on_missing: yes
        flat: yes
    - name: Ensure working directory 
      ansible.builtin.file:
        path: "{{ working_directory }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ group }}"
        mode: 0755
    - name: Unarchive 
      ansible.builtin.unarchive:
        src: "build/{{ archive_filename }}.tar.gz"
        dest: "{{ working_directory }}/"
        owner: "{{ username }}"
        group: "{{ group }}"
        mode: 0644
    - name: Ensure requirements.txt are installed
      ansible.builtin.pip:
        state: present
        requirements: "{{ working_directory }}/requirements.txt"
    - name: Install unit file to systemd
      ansible.builtin.template:
        src: templates/generic.service.j2
        dest: /etc/systemd/system/{{ service_name }}.service
        owner: root
        group: root
        mode: 0600
      when: multiinstance == False
    - name: configure systemd to use service
      ansible.builtin.systemd:
        daemon_reload: yes
        enabled: yes
        state: restarted
        name: "{{ service_name }}.service"
      when: multiinstance == False
    - name: Restart multiinstance services
      ansible.builtin.shell: "systemctl list-units | awk '/camera_monitor.*/ {print $1}' | xargs -I{} sudo systemctl restart {}"
      # ansible.builtin.shell: "systemctl list-units | awk '/camera_monitor.*/ {print $2}' | xargs -I{} sudo systemctl restart {}"
      when: multiinstance == True
